<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAgAwAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADe394AAAAAAAAAAAAAAAAAAADn5+cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADe394AAAC1trWUjpRjYWNCQUIpIDEh
        GDEpEDEpEDEpGDlSQVqlnqUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADn5+cAAAC1rrWEhoRKSUohGCkhEDkxEEo5EGNCEGNCEGNCEGtCEGtCEGtCEGs5EGNrUYQAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADe394AAAClpqVjYWMpKDEhEDExEFJCEGNC
        EGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGt7YZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADn3+cAAACcnpxaWVohGCkpEDk5EFo5EGNCEGtCEGtCEGtCEGs5EGtCEGtCEGtCEGtCEGtCEGtC
        EGtCEGtCEGs5EGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAClnqVjYWMhGCkpEEJCEGNCEGtC
        EGNCEGtCEGs5EGNCEGtSMHNjOIRKIHNCEGNCEGtCEGtCEGtCEGtCEGtCEGtCEGu9rsYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACEhoQxMDEhEDE5EGNCEGNCEGtCEGtCEGNSKHOMeaWlnq3n5+cAAAAAAAAAAACl
        nq05EGNCEGtCEGtCEGtCEGtCEGs5EGPGts4AAAAAAAAAAAAAAAAAAAAAAAAAAADGx8YpGCkxEFJCEGtC
        EGtCEGtCEGtaOHu1psatrq2cnpzGx84AAAAAAAAAAAAAAAC9vr1CMFJCEGNCEGtCEGtCEGtCEGtCGGsA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzYXs5EGNCEGs5EGNSKHO9rsa1trVCQUJrWXOtnrUAAAAA
        AAAAAAAAAAAAAAClpqUxKDFCEGNCEGtCEGtCEGtCEGuMcZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADGx845EFo5EGOEaZzW19ZSUVIhECk5IFrGvs4AAAAAAAAAAAAAAAAAAADGx8Z7eXshEClCEGtCEGtC
        EGtCEGtKIGsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzaYSllrWMjowhGCkxEEpKIGvW
        z94AAAAAAAAAAAAAAAAAAADn3+elpqU5QUIxEEpCEGtCEGtCEGtCEGu9ts4AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC1trWlpqVCQUIhEDE5EGNCGGvOz9YAAAAAAAAAAAAAAAAAAAAAAAC1trV7eXsh
        ECk5EGNCEGtCEGtCEGucjq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW19atrq17eXshICkpEEpC
        EGNCEGutnrXGx8atrq2cnpyMhozWz9YAAADOx86cnpwxMDE5EFJCEGtCEGtCEGOMcaUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADWz86lnqVaWVohECE5EFpCEGNCEGOEcZSlpqVjYWMhICEpEDkxEFJCKGPG
        vs6trq1jYWMpEDlCEGNCEGs5EGOUeaUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADOz86cnpxKSUoh
        ECk5EGNCEGM5EGtrSYS1vr1SSVIhECk5EFpCEGNCEGNCGGu1rrWcnpwhECk5EGNCEGtCEGullrUAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW19acnpxKSUohECk5EGNCEGNCEGNKKHMAAACtrq0hEClCEGNC
        EGNCEGtCGGutnrXOx8YpICk5EFpCEGtKIGvGvs4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADn396l
        pqVSUVIhECk5EGNCEGtCEGtCEGO9rsYAAADW19ZCIGM5EGtCGGtzWYzWz9be394xKDE5EFJCEGNrSYwA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1trVraWsYECE5EFpCEGtCEGtCEGtjQYQAAAAA
        AAAAAAAAAADOx9YAAAAAAADe394xKDExEEpCGGt7aYy1trVSSVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADWz86UlowhICExEFJCEGtCEGtCEGtCEGu9rsYAAAAAAAAAAAAAAAAAAAAAAADGx8YxKDkxEFJa
        OHOEeYxKSUohECExEFqUea0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1trVSSVIpEDlCEGtCEGtCEGtC
        EGtCGGMAAAAAAAAAAAAAAAAAAAAAAACtrq1zYXNjQXuEcYxjYWMhICkpEEI5EGNCEGtSKHMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACtrqUhGCk5EGNCEGtCEGtCEGtCEGtCGGsAAAAAAAAAAAAAAAAAAAC9vr2c
        lqWEcYxaWWMpICkhEDE5EFpCEGtCEGtCEGNCGGve1+cAAAAAAAAAAAAAAAAAAAAAAAAAAACclpQhEDFC
        EGtCEGtCEGtCEGtCEGs5EGt7YYzGvsbOz869vrWcnpxrYWtCQUIYECEpEDk5EFpCEGtCEGtCEGtCEGtj
        QYTW194AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAClpqUpEDlCEGtCEGtCEGtCEGtCEGtCEGtCEGsxEEop
        EDkpECkhEDEpEEIxEFJCEGNCEGtCEGtCEGs5EGtKKHOtnr0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAxIEpCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGs5EGtK
        KHOllrUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtpq05EGNCEGtCEGtCEGtC
        EGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGtCEGNjQYS1psYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtnr1CEGNCEGNCEGtCEGNCEGtCEGtCEGNCEGNCEGtCEGNaMHOU
        hq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACMcaVjQXtaKHtSKHNaMHtrSYSMcaW1pr0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/////////////99///0AH//oAA//oAAH/oAAB/4AAAP8ADgD+AB4B/wA+Af8A
        fAP/gPgD/wH4B/wAEA/4AAAf8AAAP+AQAH/AEAH/wD2A/4A/AH+AfgB/gHwAP4AAAH+AAAH/wAAH/8AA
        H//gAP//+Af//////////////////w==
</value>
  </data>
</root>